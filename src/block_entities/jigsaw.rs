use serde::{Deserialize, Serialize};
use std::borrow::Cow;

#[derive(Debug, Deserialize, Serialize, Clone, PartialEq)]
pub struct Jigsaw<'a> {
    /// The block that this jigsaw block becomes.
    #[serde(borrow)]
    pub final_state: Cow<'a, str>,

    /// The joint option value, either "rollable" or "aligned".
    pub joint: JigsawJoint,

    /// The jigsaw block's name. This jigsaw block gets aligned with another structure's jigsaw block that has this value in the target tag.
    #[serde(borrow)]
    pub name: Cow<'a, str>,

    /// The jigsaw block's target pool to select a structure from.
    #[serde(borrow)]
    pub pool: Cow<'a, str>,

    /// The jigsaw block's target name. This jigsaw block gets aligned with another structure's jigsaw block that has this value in the name tag.
    #[serde(borrow)]
    pub target: Cow<'a, str>,

    /// Priority of this jigsaw block being selected for generation. Jigsaw blocks with higher selection priority get selected first.
    pub selection_priority: i32,

    /// Priority of the piece generated by this jigsaw block to place its children. Pieces with higher placement priority generate their children first.
    pub placement_priority: i32,
}

#[derive(Debug, Deserialize, Serialize, Clone, PartialEq)]
#[serde(rename_all = "lowercase")]
#[serde(from = "&str")]
pub enum JigsawJoint {
    Rollable,
    Aligned,
}

impl From<&str> for JigsawJoint {
    fn from(s: &str) -> Self {
        match s {
            "rollable" => JigsawJoint::Rollable,
            "aligned" => JigsawJoint::Aligned,
            _ => panic!("Invalid jigsaw joint value: {}", s),
        }
    }
}

#[cfg(test)]
#[test]
fn test() {
    use fastnbt::nbt;

    let nbt = nbt!({
        "final_state": "minecraft:stone",
        "joint": "aligned",
        "name": "minecraft:stone",
        "pool": "minecraft:village/plains/houses",
        "target": "minecraft:stone",
        "selection_priority": 1,
        "placement_priority": 2
    });

    let jigsaw: Jigsaw = fastnbt::from_value(&nbt).unwrap();

    assert_eq!(jigsaw.final_state, "minecraft:stone");
    assert_eq!(jigsaw.joint, JigsawJoint::Aligned);
    assert_eq!(jigsaw.name, "minecraft:stone");
    assert_eq!(jigsaw.pool, "minecraft:village/plains/houses");
    assert_eq!(jigsaw.target, "minecraft:stone");
    assert_eq!(jigsaw.selection_priority, 1);
    assert_eq!(jigsaw.placement_priority, 2);

    let nbt = fastnbt::to_value(&jigsaw).unwrap();

    assert_eq!(nbt, nbt);
}
