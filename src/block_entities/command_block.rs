use std::borrow::Cow;

use serde::{Deserialize, Serialize};

#[derive(Debug, Deserialize, Serialize, Clone, PartialEq)]
pub struct CommandBlock<'a> {
    /// Allows to activate the command without the requirement of a redstone signal.
    pub auto: bool,

    /// The command to issue to the server.
    #[serde(borrow)]
    #[serde(rename = "Command")]
    pub command: Cow<'a, str>,

    /// Indicates whether a conditional command block had its condition met when last activated. True if not a conditional command block.
    #[serde(rename = "conditonMet")]
    #[serde(deserialize_with = "crate::util::i8_to_bool")]
    pub condition_met: bool,

    /// Optional. The name JSON text component of this command block, replacing the usual '@' when using commands such as /say and /tell.
    #[serde(borrow)]
    #[serde(rename = "CustomName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub custom_name: Option<Cow<'a, str>>,

    /// stores the tick a chain command block was last executed in.
    #[serde(rename = "LastExecution")]
    pub last_execution: i64,

    /// The last line of output generated by the command block. Still stored even if the game rule commandBlockOutput is false. Appears in the GUI of the block when right-clicked, and includes a timestamp of when the output was produced.
    #[serde(borrow)]
    #[serde(rename = "LastOutput")]
    pub last_output: Cow<'a, str>,

    /// States whether or not the command block is powered by redstone or not.
    #[serde(deserialize_with = "crate::util::i8_to_bool")]
    pub powered: bool,

    /// Represents the strength of the analog signal output by redstone comparators attached to this command block.
    #[serde(rename = "SuccessCount")]
    pub success_count: i32,

    /// Determines whether the LastOutput is stored. Can be toggled in the GUI by clicking a button near the "Previous Output" textbox. Caption on the button indicates current state: "O" if true, "X" if false.
    #[serde(rename = "TrackOutput")]
    #[serde(deserialize_with = "crate::util::i8_to_bool")]
    pub track_output: bool,

    /// Defaults to true. If set to false, loops can be created where the same command block can run multiple times in one tick.
    #[serde(rename = "UpdateLastExecution")]
    #[serde(deserialize_with = "crate::util::i8_to_bool")]
    pub update_last_execution: bool,
}

#[cfg(test)]
#[test]
fn test() {
    use fastnbt::nbt;

    let nbt = nbt!({
        "auto": 1i8,
        "Command": "say Hello, world!",
        "conditonMet": 1i8,
        "CustomName": "Hello, world!",
        "LastExecution": 0i64,
        "LastOutput": "Hello, world!",
        "powered": 1i8,
        "SuccessCount": 0i32,
        "TrackOutput": 1i8,
        "UpdateLastExecution": 1i8
    });

    let command_block: CommandBlock = fastnbt::from_value(&nbt).unwrap();

    assert_eq!(command_block.auto, true);
    assert_eq!(command_block.command, Cow::Borrowed("say Hello, world!"));
    assert_eq!(command_block.condition_met, true);
    assert_eq!(
        command_block.custom_name,
        Some(Cow::Borrowed("Hello, world!"))
    );
    assert_eq!(command_block.last_execution, 0);
    assert_eq!(command_block.last_output, Cow::Borrowed("Hello, world!"));
    assert_eq!(command_block.powered, true);
    assert_eq!(command_block.success_count, 0);
    assert_eq!(command_block.track_output, true);
    assert_eq!(command_block.update_last_execution, true);

    let nbt = fastnbt::to_value(&command_block).unwrap();

    assert_eq!(nbt, nbt);
}
